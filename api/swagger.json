{
  "swagger": "2.0",
  "info": {
    "title": "Virtual Credit Payments",
    "version": "1.0",
    "description": "Virtual credits payment API"
  },
  "paths": {
    "/cards": {
      "get": {
        "tags": [
          "virtualCardController"
        ],
        "summary": "Lists all cards",
        "description": "Get all cards for a given station",
        "operationId": "getCardsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Token used for authorisation",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all cards",
            "schema": {
              "$ref": "#/definitions/Cards"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "API key is missing or invalid"
          },
          "404": {
            "description": "Cards not found"
          },
          "500": {
            "description": "Validation exception"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "JWTAuthorizer": []
          }
        ]
      },
      "post": {
        "tags": [
          "virtualCardController"
        ],
        "summary": "Creates a new card",
        "description": "Adds virtual card with initial balance and validates the id",
        "operationId": "createCardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Token used for authorisation",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "card",
            "description": "amount to be added to the balance of the new card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Returns the payment card",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "API key is missing or invalid"
          },
          "403": {
            "description": "Unauthorized to perform this operation"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "JWTAuthorizer": []
          }
        ]
      }
    },
    "/cards/{id}": {
      "get": {
        "tags": [
          "virtualCardController"
        ],
        "summary": "Retrieves a single card",
        "description": "Gets card for a particular Card ID and validates the ID",
        "operationId": "getCardUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Token used for authorisation",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Card's id to get",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns single card",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "API key is missing or invalid"
          },
          "404": {
            "description": "Card not found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "JWTAuthorizer": []
          }
        ]
      }
    },
    "/cards/{id}/balance": {
      "get": {
        "tags": [
          "virtualCardController"
        ],
        "summary": "Retrives a card balance",
        "description": "Gets a card balance for a particular Card ID and validates the ID",
        "operationId": "getCardBalanceUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Token used for authorisation",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Card's id to get balance",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns single card balance",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "API key is missing or invalid"
          },
          "404": {
            "description": "Card not found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "JWTAuthorizer": []
          }
        ]
      }
    },
    "/cards/{id}/deposit": {
      "post": {
        "tags": [
          "virtualCardController"
        ],
        "summary": "Deposits to a card",
        "description": "Deposits amount to a card balance for a particular Card id and validates the id",
        "operationId": "depositsAmountToCardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Token used for authorisation",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Card's id to deposit to",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "amount",
            "description": "amount to be added to the balance of the the card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Amount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a card balance after deposit",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "API key is missing or invalid"
          },
          "404": {
            "description": "Card not found"
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "JWTAuthorizer": []
          }
        ]
      }
    },
    "/cards/{id}/withdraw": {
      "post": {
        "tags": [
          "virtualCardController"
        ],
        "summary": "Withdraws from a card",
        "description": "Withdraws amount from a card balance for a particular Card id and validates the id",
        "operationId": "withdrawsAmountFromCardUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Token used for authorisation",
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Card's id to withdraw from",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "amount",
            "description": "amount to be withdrawn from the balance of the card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Amount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns single card balance after withdraw",
            "schema": {
              "$ref": "#/definitions/Balance"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "API key is missing or invalid"
          },
          "404": {
            "description": "Card not found"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Conflict"
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "503": {
            "description": "Service Unavailable"
          }
        },
        "security": [
          {
            "JWTAuthorizer": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "JWTAuthorizer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Card": {
      "type": "object",
      "required": [
        "id",
        "balance"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Card's id",
          "example": "00160317b7"
        },
        "balance": {
          "type": "integer",
          "description": "Card balance",
          "example": 50
        },
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Transaction"
          },
          "description": "Deposits and withdraws for the card"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Data-time when the card was created"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Data time when the card was last modified"
        }
      }
    },
    "Balance": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "integer",
          "description": "Card balance",
          "example": 50
        }
      }
    },
    "Amount": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "integer",
          "description": "Transaction amount",
          "example": 10
        }
      }
    },
    "Cards": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Card"
      }
    },
    "Transaction": {
      "type": "object",
      "required": [
        "amount",
        "type"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int32",
          "description": "The amount that is either deposited or withdrawn from the card",
          "example": 1
        },
        "type": {
          "type": "integer",
          "format": "double"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Data-time when the transaction happened"
        }
      }
    },
    "Conflict": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "schemes": [
    "https"
  ]
}
